<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IPSec VPN</title>
      <link href="/2023/01/27/ipsec%20vpn/"/>
      <url>/2023/01/27/ipsec%20vpn/</url>
      
        <content type="html"><![CDATA[<h1 id="1-IPSec-VPN-是什么"><a href="#1-IPSec-VPN-是什么" class="headerlink" title="1. IPSec VPN 是什么"></a>1. IPSec VPN 是什么</h1><p>VPN 技术一般指虚拟专用网络。 虚拟专用网络(VPN)的功能是：在公用网络上建立专用网络，进行加密通讯。在企业网络中有广泛应用。VPN 网关通过对数据包的加密和数据包目标地址的转换实现远程访问。 PPTP VPN、L2TP&#x2F;IPSec VPN、 Open VPN（SSL VPN）是最常用的三种 VPN 形式。</p><p>IPSec 是为实现 VPN 功能而最普遍使用的协议。 IPSec 不是一个单独的协议，它给出了应用于 IP 层上网络数据安全的一整套体系结构。该体系结构包括认证头协议(Authentication Header，简称为 AH )、封装安全负载协议(Encapsulating Security Payload，简称为 ESP)、密钥管理协议( Internet Key Exchange，简称为 IKE）和用于网络认证及加密的一些算法等。 IPSec规定了如何在对等体之间选择安全协议、确定安全算法和密钥交换，向上提供了访问控制、数据源认证、数据加密等网络安全服务。</p><p>IPSec VPN 是指采用 IPSec 协议来实现远程接入的一种 VPN 技术。 StoneOS 通过“基于策略的 VPN”和“基于路由的 VPN”两种方式把配置好的 VPN 隧道应用到 Hillstone 设备上，实现流量的加密解密安全传输。</p><p>基于策略的 VPN：将配置成功的 VPN 隧道名称引用到策略规则中，使符合条件的流量通过指定的 VPN 隧道进行传输。</p><p>基于路由的 VPN： 将配置成功的 VPN 隧道与隧道接口绑定；配置静态路由时，将隧道接口指定为下一跳路由。</p><h1 id="2-IPSec-VPN-框架"><a href="#2-IPSec-VPN-框架" class="headerlink" title="2. IPSec VPN 框架"></a>2. IPSec VPN 框架</h1><p><img src="https://cdn.jsdelivr.net/gh/ktoucha/blogimage@main/img/28003775-1335a3aa47b9a552.png" alt="img"></p><h2 id="2-1-密钥交换部分"><a href="#2-1-密钥交换部分" class="headerlink" title="2.1 密钥交换部分"></a>2.1 密钥交换部分</h2><p><strong>密钥获得方法：</strong>手工密钥、协商密钥交换。</p><p><strong>密钥交换两个阶段：</strong>第一阶段完成认证和对第二阶段保护套件的协商；第二阶段完成真正VPN 数据保护套件的协商。</p><p><strong>密钥交换两种主要的交换模式：</strong>主模式和野蛮模式。</p><h2 id="2-2-数据封装部分"><a href="#2-2-数据封装部分" class="headerlink" title="2.2 数据封装部分"></a>2.2 数据封装部分</h2><p><strong>两种协议：</strong> ESP 和 AH (StoneOS 单独支持 ESP 和 AH，但不支持 ESP+AH 组合使用)。</p><p><strong>两种模式：</strong>封装模式和传输模式。</p><p><strong>提供的安全：</strong>秘密性、完整性、防重放。</p><h2 id="2-3-密钥交换协议-IKE"><a href="#2-3-密钥交换协议-IKE" class="headerlink" title="2.3 密钥交换协议(IKE)"></a>2.3 密钥交换协议(IKE)</h2><p>IPSec VPN 需要预先协商加密协议、散列函数、封装协议、封装模式和密钥有效期等内容，具体执行协商任务的协议叫做 IKE。 IKE 属于一种混合型协议，由 Internet 安全关联和密钥管理协议（ISAKMP）和两种密钥交换协议 OAKLEY 与 SKEME 组成。</p><p>IKE 使用了两个阶段为 IPSec 进行密钥协商并建立安全联盟 SA：</p><p>第一阶段，通信各方彼此间建立了一个已通过身份验证和安全保护的通道，此阶段的交换建立了一个 ISAKMP 安全联盟， 即 ISAKMP SA (也可称 IKE SA。安全关联（SA）是实体间的关系，它表示通信方如何使用安全服务进行安全通信。 IKE SA 就是 IKE 之间如何使用安全服务进行通信；IPSec SA 就是 IPSec 实体间如何使用安全服务进行通信）。</p><p>第二阶段，用在第一阶段建立的安全通道为 IPSec 协商安全服务，即为 IPSec 协商具体的安全联盟，建立 IPSec SA，IPSec SA 用于最终的 IP 数据安全传输。</p><h2 id="2-4-安全联盟-SA-及匹配方法"><a href="#2-4-安全联盟-SA-及匹配方法" class="headerlink" title="2.4 安全联盟 SA 及匹配方法"></a>2.4 安全联盟 SA 及匹配方法</h2><p>SA：IPSec 在两个端点之间提供安全通信， 两个端点被称为 IPSec ISAKMP 网关。安全联盟（简称为 SA）是 IPSec 的基础，也是 IPSec 的本质。 SA 是通信对等体间对某些要素的约定， 例如使用哪种协议、协议的操作模式、加密算法（DES、 3DES、 AES-128、AES-192 和 AES-256）、特定流中保护数据的共享密钥以及 SA 的生存周期等。</p><p><strong>SA 匹配方法：</strong></p><p><strong>Outbound(加密方向)：</strong>策略或者路由驱动。比如 policy 定义某一个流（源地址、目的地址和应用（协议、源端口、目的端口））进行 IPSec 加密。路由驱动，绑定 VPN 到 tunnel 接口，路由到该 tunnel 接口。</p><p><strong>Inbound（解密方向）：</strong>目的地址+协议+SPI。实际时 flow，即六元组（源目 IP，源目端口，协议，入安全域）的匹配，其中源端口和目的端口共同组成了 SPI。</p><h1 id="3-IPSec-VPN-特性"><a href="#3-IPSec-VPN-特性" class="headerlink" title="3. IPSec VPN 特性"></a>3. IPSec VPN 特性</h1><h2 id="3-1-两种协商模式"><a href="#3-1-两种协商模式" class="headerlink" title="3.1 两种协商模式"></a>3.1 两种协商模式</h2><p>第一阶段主模式需要 3 次共 6 个报文的交换。第一次交换用来协商 p1 提议；第二次交换用于生成给后续协商报文和数据报文加密用的加密材料；第三次交换用来验证对方身份，其中包含 ID 和认证载荷。 1、 2、 3、 4 个报文为明文传输， 5、 6 个报文使用 3、 4 报文协商出的加密材料进行加密。</p><p>第一阶段野蛮模式需要总共 3 个报文的交换。第一个报文就将 p1 提议、本端 ID 等发送给对端，响应者发送的第二个报文包含选定的 p1 提议、本端 ID 和认证载荷等发给发起者，最后发起者会将自己的认证载荷作为第三个报文发出。野蛮模式三个报文都为明文传输。</p><p>主模式的身份认证是在加密的第 5、 6 个报文完成，因此主模式比野蛮模式更加安全；野蛮模式交互只需要 3 个报文，比主模式更快；主模式的协商能力强于野蛮模式。</p><h2 id="3-2-两种封装模式"><a href="#3-2-两种封装模式" class="headerlink" title="3.2 两种封装模式"></a>3.2 两种封装模式</h2><h3 id="3-2-1-传输模式"><a href="#3-2-1-传输模式" class="headerlink" title="3.2.1 传输模式"></a>3.2.1 传输模式</h3><p>传输模式（Transport Mode）是 IPSec 的默认模式,又称端到端（End-to-End）模式，它只适用于 PC 到 PC 的场景（原因： 1. IP 地址无法在公网路由， 2. 由于目的地址不是响应方网关，即使到达网关也无法解密） 。</p><p>传输模式下只对 IP 负载进行保护，可能是 TCP&#x2F;UDP&#x2F;ICMP 协议，也可能是 AH&#x2F;ESP 协议。传输模式只为上层协议提供安全保护，在此种模式下，参与通信的双方主机都必须安装 IPSec协议，而且它不能隐藏主机的 IP 地址。启用 IPSec 传输模式后，IPSec 会在传输层包的前面增加 AH&#x2F;ESP 头部或同时增加两种头部，构成一个 AH&#x2F;ESP 数据包，然后添加 IP 头部组成 IP包。在接收方， 首先处理的是 IP，然后再做 IPSec 处理，最后再将载荷数据交给上层协议。</p><p><img src="https://cdn.jsdelivr.net/gh/ktoucha/blogimage@main/img/28003775-f2cff1d6bc4adce3.png" alt="img"></p><h3 id="3-2-2-隧道模式"><a href="#3-2-2-隧道模式" class="headerlink" title="3.2.2 隧道模式"></a>3.2.2 隧道模式</h3><p>隧道模式（Tunnel Mode）使用在两台网关之间，站点到站点（Site-to-Site）的通信。参与通信的两个网关实际是为了两个以其为边界的网络中的设备提供安全通信的服务。</p><p>隧道模式为整个 IP 包提供保护，为 IP 协议本身而不只是上层协议提供安全保护。通常情况下只要使用 IPSec 的双方有一方是安全网关，就必须使用隧道模式。大部分 VPN 都使用隧道模式，因为它不仅对整个原始报文加密，还对通信的源地址和目的地址进行部分和全部加密，只需要在安全网关，而不需要在内部主机上安装 VPN 软件，期间所有加密和解密以及协商操作均由前者负责完成。</p><p>启用IPSec隧道模式后， IPSec将原始IP看作一个整体作为要保护的内容，前面加上AH&#x2F;ESP头部，再加上新 IP 头部组成新 IP 包。</p><p><img src="https://cdn.jsdelivr.net/gh/ktoucha/blogimage@main/img/28003775-b1abc002d8b85d06.png" alt="img"></p><h2 id="3-3-两种认证方式"><a href="#3-3-两种认证方式" class="headerlink" title="3.3 两种认证方式"></a>3.3 两种认证方式</h2><p><strong>预共享密钥认证：</strong>生成加密材料时会使用预共享密钥;认证载荷是对加密材料的 hash 运算值。 通常情况下，确定预共享密钥需要根据对端 IP，如果对端的 IP 是动态则无法找到正确的预共享密钥。Hillstone 的设备是通过 peer 来对应预共享密钥，只要找到了正确的 peer 也就能找到正确的预共享密钥。并且 hillstone 设备对于查找 peer 有一套自己的逻辑，因此 hillstone 的设备在对端为动态的情况下也能使用主模式。</p><p><strong>证书认证：</strong>生成加密材料时会使用 DH 交换生成的共享秘密；认证载荷包括签名载荷和证书载荷。对于 hillstone 的设备来说，签名载荷是用对应信任域中的私钥，对发送的消息中的一部分进行加密。证书载荷是对应信任域中的本地证书。</p><h2 id="3-4-NAT-穿越"><a href="#3-4-NAT-穿越" class="headerlink" title="3.4 NAT 穿越"></a>3.4 NAT 穿越</h2><p><strong>AH 协议不支持 NAT 穿越， ESP 协议支持 NAT 穿越。</strong></p><p><strong>原因：</strong> NAT 网关会修改报文的 IP 和 port，但 IPSec 中的 AH 协议是对整个报文进行完整性校验的，不允许 NAT 设备对报文进行任何修改操作。而 ESP 协议只验证 IP 负载部分，不对 IP 头部进行验证，因此，使用 AH 协议封装保护的 IPSec 流量是无法和 NAT 共存的。</p><p>封装协议协议号是否提供保密性是否提供完整性是否提供源认证是否验证IP头部</p><p>ESP50是是是只验证IP负载部分，不对IP头部进行验证</p><p>AH51否是是除了要验证IP负载部分，还要验证IP头部的部分字段</p><p>正常的 isakmp 报文是通过 UDP 的 500 端口发送，开启 NAT 穿越后， isakmp 协商报文（主模式的 1、 2、 3、 4 个报文，野蛮模式 1、 2 个报文）会进行 nat 探测，一旦发现中间存在 nat设备，isakmp(主模式第五个以及后面的报文，野蛮模式第 3 个以及后面的报文）会将端口改为 UDP 的 4500，并在 UDP 报头和 isakmp 报头之间插入一个 non esp marker 用来和 UDP封装的 esp 报文进行区分， 之后的 esp 数据报文会在 new IP 头和 esp 头之间插入一个 UDP报头（端口号为 4500），这样就可以支持中间设备的 PAT。</p><h1 id="a-IPSec基础介绍"><a href="#a-IPSec基础介绍" class="headerlink" title="a. IPSec基础介绍"></a>a. IPSec基础介绍</h1><p><strong>IPSec定义：</strong>（英语：Internet Protocol Security，缩写为IPsec），是一个协议包，通过对IP协议的分组进行加密和认证来保护IP协议的网络传输协议族（一些相互关联的协议的集合）。</p><h2 id="1-IPSec对等体"><a href="#1-IPSec对等体" class="headerlink" title="1. IPSec对等体"></a>1. IPSec对等体</h2><p>IPSec 用于在两个端点之间提供安全的 IP 通信，通信的两个端点被称为 IPSec 对等体。</p><h2 id="2-安全联盟"><a href="#2-安全联盟" class="headerlink" title="2. 安全联盟"></a>2. 安全联盟</h2><p>SA（Security Association）安全联盟是要建立IPSec隧道的通信双方对隧道参数的约定，包括隧道两端的IP地址、隧道采用的验证方式、验证算法、验证密钥、加密算法、加密密钥、共享密钥以及生存周期等一系列参数。</p><p>SA 是单向的，在两个对等体之间的双向通信，至少需要两个 SA。SA 由一个三元组来唯一标识，这个三元组包括安全参数索引 SPI（Security Parameter Index）、目的 IP 地址、安全协议名（AH 或 ESP）。</p><h2 id="3-协商方式"><a href="#3-协商方式" class="headerlink" title="3. 协商方式"></a>3. 协商方式</h2><p>建立 SA 的方式有以下两种：</p><p>手工方式（manual）：建立安全联盟比较复杂，安全联盟所需的全部信息都必须手工配置。但优点是可以不依赖 IKE 而单独实现 IPSec 功能。</p><p>IKE 动态协商（isakmp）方式：建立安全联盟相对简单些，只需要通信对等体间配置好 IKE协商参数，由 IKE 自动协商来创建和维护 SA。</p><h2 id="4-IPSec封装模式"><a href="#4-IPSec封装模式" class="headerlink" title="4. IPSec封装模式"></a>4. IPSec封装模式</h2><p><img src="https://cdn.jsdelivr.net/gh/ktoucha/blogimage@main/img/28003775-818fc1ab9b82782d.png" alt="img"></p><p><strong>隧道模式。</strong>在隧道模式下，AH 或 ESP 插在原始 IP 头之前，另外生成一个新 IP 头放到 AH或 ESP 之前。</p><p><img src="https://cdn.jsdelivr.net/gh/ktoucha/blogimage@main/img/28003775-d949f90ce8cf5607.png" alt="img"></p><p><strong>传输模式。</strong>在传输模式下，AH 或 ESP 被插入到 IP 头之后但在传输层协议之前。</p><p><img src="https://cdn.jsdelivr.net/gh/ktoucha/blogimage@main/img/28003775-fcca792f64559663.png" alt="img"></p><p>图注：传输模式示意图</p><p>隧道模式生成新的包头安全性比传输模式高，但隧道模式比传输模式占用带宽更多。</p><h2 id="5-IPSec使用的认证算法和加密算法"><a href="#5-IPSec使用的认证算法和加密算法" class="headerlink" title="5. IPSec使用的认证算法和加密算法"></a>5. IPSec使用的认证算法和加密算法</h2><p><strong>认证算法</strong></p><p>MD5（Message Digest 5）：MD5 通过输入任意长度的消息，产生 128bit 的消息摘要。</p><p>SHA-1（Secure Hash Algorithm）：SHA-1 通过输入长度小于 2 的 64 次方比特的消息，产生 160bit 的消息摘要。</p><p>SHA-2：SHA-2 算法相对于 SHA-1 加密数据位数有所上升，安全性能要远远高于SHA-1。</p><p><strong>加密算法</strong></p><p>加密算法实现主要通过对称密钥系统，它使用相同的密钥对数据进行加密和解密。</p><p>IPSec使用以下三种加密算法：</p><p>DES：使用 56bit 的密钥对一个 64bit 的明文块进行加密。</p><p>3DES：使用三个 56bit 的 DES 密钥（共 168bit 密钥）对明文进行加密。</p><p>AES：使用 128bit、192bit 或 256bit 密钥长度的 AES 算法对明文进行加密。</p><h2 id="6-通信保护协议"><a href="#6-通信保护协议" class="headerlink" title="6. 通信保护协议"></a>6. 通信保护协议</h2><p><strong>AH认证头协议：</strong></p><p>协议号51。</p><p>定义于RFC 2402。</p><p>鉴别头AH：（不提供保密性，只对整个IP数据包提供保护）。</p><p>无连接数据完整性：通过哈希函数产生的校验来保证。</p><p>数据源认证：通过计算验证码时加入一个共享密钥来实现。</p><p>抗重放服务：AH报头中的随机序列号可以防止重放攻击。</p><p>可以用于隧道和传输两种模式中。</p><p>使用MD5&#x2F;SHA-1。</p><p>提供如下的功能：</p><p>数据完整性；</p><p>数据源认证；</p><p>Anti-replay服务。</p><p><img src="https://cdn.jsdelivr.net/gh/ktoucha/blogimage@main/img/28003775-8b1d0c23c1e81e32.png" alt="img"></p><p><strong>ESP封装安全载荷协议：</strong></p><p>协议号50。</p><p>定义于RFC 2406。</p><p>除提供 AH 认证头协议的所有功能之外，还有数据保密和有限的数据流保护，ESP 协议允许对 IP 报文净荷进行加密和认证、只加密或者只认证，ESP 没有对 IP头的内容进行保护。</p><p>保密服务通过使用密码算法加密 IP 数据包的相关部分来实现。</p><p>数据流保密由隧道模式下的保密服务提供。</p><p>ESP通常使用DES、3DES、AES等加密算法实现数据加密，使用MD5或SHA1来实现数据完整性认证。</p><p>AH认证头协议，无法在穿越NAT的时候使用，因为AH协议会对IP包头进行校验。ESP协议可以。</p><p>可以用于隧道和传输两种模式中。</p><p>提供如下的功能：</p><p>数据完整性；</p><p>数据保密性；</p><p>数据源认证；</p><p>Anti-replay服务。</p><p><img src="https://cdn.jsdelivr.net/gh/ktoucha/blogimage@main/img/28003775-4a197bb5e5099b55.png" alt="img"></p><h2 id="7-IPsec提供了两种安全机制：认证和加密"><a href="#7-IPsec提供了两种安全机制：认证和加密" class="headerlink" title="7. IPsec提供了两种安全机制：认证和加密"></a><strong>7. IPsec提供了两种安全机制：认证和加密</strong></h2><p>认证机制使 IP 通信的数据接收方能够确认数据发送方的真实身份以及数据在传输过程中是否遭篡改。</p><p>加密机制通过对数据进行加密运算来保证数据的机密性，以防数据在传输过程中被窃听。</p><h1 id="b-1-IPSecVPN协商过程"><a href="#b-1-IPSecVPN协商过程" class="headerlink" title="b.1 IPSecVPN协商过程"></a>b.1 IPSecVPN协商过程</h1><p><img src="https://cdn.jsdelivr.net/gh/ktoucha/blogimage@main/img/28003775-35eccdda5e63b90c.png" alt="img"></p><h2 id="b-2-主模式与野蛮模式对比"><a href="#b-2-主模式与野蛮模式对比" class="headerlink" title="b.2 主模式与野蛮模式对比"></a>b.2 主模式与野蛮模式对比</h2><p>IKEv1建立IKESA的过程定义了主模式（Main Mode）和野蛮模式（Aggressive Mode）两种交换模式。</p><p><strong>主模式</strong>包含三次双向交换，用到了六条信息：</p><p>消息①和②用于协商算法；</p><p>消息③和④用于密钥信息交换，DH算法；</p><p>消息⑤和⑥用于身份和认证信息交换。</p><p><strong>野蛮模式</strong>只用到三条信息：</p><p>前两条消息①和②用于协商提议，消息③用于响应方认证发起方。</p><p><img src="https://cdn.jsdelivr.net/gh/ktoucha/blogimage@main/img/28003775-429ae79abfc1c066.png" alt="img"></p><p>图注：主模式与野蛮模式报文对比 </p><p>野蛮模式协商比主模式协商更快。主模式需要交互6个消息，<strong>野蛮模式只需要交互3个消息。</strong></p><p>主模式协商比野蛮模式协商更严谨、更安全。因为主模式在5、6个消息中对ID信息进行了加密。<strong>而野蛮模式受到交换次数的限制</strong>，ID信息在1、2个消息中以明文的方式发送给对端。即主模式对对端身份进行了保护，而野蛮模式则没有。</p><p>两种模式在确定预共享的方式不同。主模式只能基于IP地址来确定预共享密钥。而野蛮模式是基于ID信息（主机名和IP地址）来确定预共享密钥。</p><h1 id="c-1-IPSecVPN协商过程-主模式"><a href="#c-1-IPSecVPN协商过程-主模式" class="headerlink" title="c.1 IPSecVPN协商过程(主模式)"></a>c.1 IPSecVPN协商过程(主模式)</h1><p>【第一阶段】</p><p>（1）主模式包交换解析(第一组报文)</p><p>第一阶段第一组报文1和2的主要任务：</p><blockquote><ul><li>加密算法</li><li>散列算法</li><li>DH组</li><li>认证方式</li><li>密钥有效期</li></ul></blockquote><p>完成以上内容的协商</p><p>（2）主模式包交换解析(第二组报文)</p><p>IKE Phase 1 (Main Mode): Sending Message 3 and 4两部分内容要互相交换：Key Exchange和Nonce Payload：</p><p>Key exchange data是双方共同要告诉对方的。</p><p>Nonce(随机产生非常大的数字)是双方接下来验证需要的原材料之一。第二组的主要任务就是要交换双方的共享信息，产生一个密钥。</p><p>（3）主模式包交换解析(第三组报文)</p><p>预共享密钥认证：</p><p>IKE Phase 1(Main Mode): Sending Message 5</p><p>把Hash_l通过SKEYID_e进加密发送</p><p>IKE Phase 1 (Main Mode): Sending Message 6</p><p>把Hash_R通过SKEYID_e进加密发送</p><p>最后一组发送完毕后，使用SKEYID_e解密对方发送的数据，里面有原始数据ID_R和哈希值Hash_R，使用接收到的ID_R按照PRFE函数进行哈希，比较接收到的哈希值和自己产生的哈希值是否相等。</p><p>Hash_R ? &#x3D; Self Hash_R</p><p>相等即可建立ISAKMP SA，IKE第一阶段完成。</p><p>【第二阶段】</p><p>（1）第1个包：</p><p>在IKE SA协商基础上形成新的KEY；</p><p>封装方式：AH、ESP；</p><p>加密方式：DES、3DES、AES…；</p><p>完整性算法：MD5、SHA-1；</p><p>IPSEC SA：默认1个小时；</p><p>两端保护子网。</p><p>（2）第2个包：包主要是接收端查看本地有没有一个IPSec SA策略与发起方的一样，如果有，并且认证成功，感兴趣流协商成功，那么接收端会把协商成功的IPSec SA策略发给发起端，同时也会把自己的认证KEY发给发启端来进行双向认证。</p><p>（3）第3个包：包主要是发起端对接收端发来的第二个包进行确认，协商成功进行业务访问</p><h2 id="c-2-IPSecVPN协商过程-野蛮模式"><a href="#c-2-IPSecVPN协商过程-野蛮模式" class="headerlink" title="c.2 IPSecVPN协商过程(野蛮模式)"></a>c.2 IPSecVPN协商过程(野蛮模式)</h2><p>野蛮模式同样包含三个步骤，但仅通过三个包进行传输，标示为aggressive 野蛮模式的三个包交换：</p><p>第1个交互包发起方建议SA，发起DH交换；</p><p>第2个交互包接收方接收SA；</p><p>第3个交互包发起方认证接收方，野蛮模式前两个报文是明文，第三个报文是密文。</p><h1 id="d-IPSecVPN高级设置"><a href="#d-IPSecVPN高级设置" class="headerlink" title="d. IPSecVPN高级设置"></a>d. IPSecVPN高级设置</h1><h3 id="d-1-IPSecVPN中NAT穿越-NAT-T"><a href="#d-1-IPSecVPN中NAT穿越-NAT-T" class="headerlink" title="d.1 IPSecVPN中NAT穿越(NAT-T)"></a>d.1 IPSecVPN中NAT穿越(NAT-T)</h3><p>在非NAT环境中，IPSec协商使用UDP 500端口进行协商。而VPN设备（私网出口地址)如果在NAT设备内部，NAT不会对ESP进行端口转换，此时需要NAT-T技术在ESP封装和外层IP报头之间插入8个字节的UDP报头，端口号为UDP 4500。</p><p><img src="https://cdn.jsdelivr.net/gh/ktoucha/blogimage@main/img/28003775-14e364c4763a72d9.png" alt="img"></p><h3 id="d-2-IPSecVPN-Proxy-ID"><a href="#d-2-IPSecVPN-Proxy-ID" class="headerlink" title="d.2 IPSecVPN Proxy-ID"></a>d.2 IPSecVPN Proxy-ID</h3><p>Proxy ID（代理ID，即感兴趣流）用于在两个VPN端对端间交换策略，代表着需要获得安全服务的数据包，通常指两端内网地址，定义的地址必须对称。</p><p>若无填写，采用策略模式则需要在创建策略时填写对称的地址，即本地的源地址子网与对端的目的地址子网相同。</p><p>Proxy ID 常用于本端 Hillstone，对端第三方设备的场景。</p><p>Proxy ID 错误配置是 VPN 建立最常见的错误。</p>]]></content>
      
      
      <categories>
          
          <category> 网络工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>青龙面板自动签到京豆</title>
      <link href="/2023/01/25/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF/"/>
      <url>/2023/01/25/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="docker安装青龙面板"><a href="#docker安装青龙面板" class="headerlink" title="docker安装青龙面板"></a>docker安装青龙面板</h1><h2 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1.安装docker"></a>1.安装docker</h2><h2 id="2-拉取镜像"><a href="#2-拉取镜像" class="headerlink" title="2.拉取镜像"></a>2.拉取镜像</h2><p><a href="https://hub.docker.com/r/whyour/qinglong">https://hub.docker.com/r/whyour/qinglong</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker pull whyour/qinglong</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动容器</span></span><br><span class="line">docker run -dit \</span><br><span class="line"> -v /mnt/sdb3/docker/ql/config:/ql/config \</span><br><span class="line"> -v /mnt/sdb3/docker/ql/log:/ql/log \</span><br><span class="line"> -v /mnt/sdb3/docker/ql/db:/ql/db \</span><br><span class="line"> -v /mnt/sdb3/docker/ql/scripts:/ql/scripts \</span><br><span class="line"> -v /mnt/sdb3/docker/ql/repo:/ql/repo\</span><br><span class="line"> -v /mnt/sdb3/docker/ql/jbot:/ql/jbot\</span><br><span class="line"> -p 5700:5700 \</span><br><span class="line"> --name ql \</span><br><span class="line"> --hostname ql \</span><br><span class="line">--privileged=true \</span><br><span class="line">--restart always \</span><br><span class="line"> whyour/qinglong:latest</span><br></pre></td></tr></table></figure><h3 id="3-依赖安装"><a href="#3-依赖安装" class="headerlink" title="3. 依赖安装"></a>3. 依赖安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器名 bash</span><br><span class="line">curl -fsSL https://ghproxy.com/https://raw.githubusercontent.com/bean661/utils/main/QLOneKeyDependency_easy.sh | sh</span><br></pre></td></tr></table></figure><h3 id="4-拉脚本库"><a href="#4-拉脚本库" class="headerlink" title="4. 拉脚本库"></a>4. 拉脚本库</h3><p>在<strong>青龙面板</strong>-<strong>定时任务</strong>-右上角点击<strong>添加任务</strong></p><p>定时规则就填 0 0 0 * * * </p><h4 id="【kr】-库"><a href="#【kr】-库" class="headerlink" title="【kr】 库"></a>【kr】 库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql repo https://github.com/KingRan/KR.git &quot;jd_|jx_|jdCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|utils|function|sign|sendNotify|ql|JDJR&quot;</span><br></pre></td></tr></table></figure><h4 id="青蛙蛤蟆-国内仓库"><a href="#青蛙蛤蟆-国内仓库" class="headerlink" title="青蛙蛤蟆 国内仓库"></a>青蛙蛤蟆 国内仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql repo https://github.com/smiek2121/scripts.git &quot;gua_&quot; &quot;&quot; &quot;ZooFaker_Necklace.js|JDJRValidator_Pure.js|sign_graphics_validate.js|cleancart_activity.js|jdCookie.js|sendNotify.js&quot;</span><br></pre></td></tr></table></figure><p>添加完成后 点击拉脚本 然后刷新网页</p><p><img src="https://img-blog.csdnimg.cn/17493d9ddcd14b79adece23548f5a3b0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYmVhbnNxcQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>参考<a href="https://blog.csdn.net/FishBean/article/details/121819862">https://blog.csdn.net/FishBean/article/details/121819862</a></p><p>使用参考<a href="https://www.jianshu.com/p/d72f76068a3e">https://www.jianshu.com/p/d72f76068a3e</a></p><h2 id="获取京豆任务"><a href="#获取京豆任务" class="headerlink" title="获取京豆任务"></a>获取京豆任务</h2><h3 id="1-创建定时任务"><a href="#1-创建定时任务" class="headerlink" title="1. 创建定时任务"></a>1. 创建定时任务</h3><p>自行搜索，找到大佬们仓库地址还存在的话，可直接加到定时任务中</p><p><img src="https://upload-images.jianshu.io/upload_images/24476144-d66615f6e4990e6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1036/format/webp" alt="img"></p><p>保存后点击运行，过一段时间后会自动拉取一堆定时任务。</p><p><img src="https://upload-images.jianshu.io/upload_images/24476144-add989ebff02c85a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h3 id="2-获取京东的cookies"><a href="#2-获取京东的cookies" class="headerlink" title="2. 获取京东的cookies"></a>2. 获取京东的cookies</h3><p>使用chrome登录[<a href="https://m.jd.com/]%EF%BC%8C%E6%89%93%E5%BC%80%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E6%9F%A5%E7%9C%8B%E8%AF%B7%E6%B1%82%EF%BC%8C%E6%89%BE%E5%88%B0%E9%87%8C%E9%9D%A2%E7%9A%84cookies%EF%BC%8C%E4%BD%86%E5%AE%9E%E9%99%85%E9%9C%80%E8%A6%81%E7%9A%84%E5%8F%AA%E6%98%AF%E5%85%B6%E4%B8%AD%E7%9A%84%E4%B8%80%E5%B0%8F%E6%AE%B5%EF%BC%8C%60pt_key%60%E5%92%8C%60pt_pin%60%E3%80%82%E6%88%AA%E5%8F%96%E5%90%8E%E5%B9%B6%E5%9C%A8%E7%8E%AF%E5%A2%83%E7%BC%96%E8%BE%91%E4%B8%AD%E8%AE%BE%E7%BD%AE%E3%80%82">https://m.jd.com/]，打开开发者工具查看请求，找到里面的cookies，但实际需要的只是其中的一小段，`pt_key`和`pt_pin`。截取后并在环境编辑中设置。</a></p><p><img src="https://upload-images.jianshu.io/upload_images/24476144-410b9e63d566f99d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/940/format/webp" alt="img"><br> 保存后所有拉取的京东任务就会正常运行，可以在任务里面看到相关日志。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>部署Chemex资产管理系统</title>
      <link href="/2023/01/25/chemex%E8%B5%84%E4%BA%A7%E7%AE%A1%E7%90%86/"/>
      <url>/2023/01/25/chemex%E8%B5%84%E4%BA%A7%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="使用docker部署"><a href="#使用docker部署" class="headerlink" title="使用docker部署"></a>使用docker部署</h2><h3 id="centos7系统安装"><a href="#centos7系统安装" class="headerlink" title="centos7系统安装"></a><strong>centos7系统安装</strong></h3><h4 id="一、安装Docker"><a href="#一、安装Docker" class="headerlink" title="一、安装Docker"></a>一、安装Docker</h4><ol><li><strong>部署docker的yum源</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 2: 添加软件源信息</span></span><br><span class="line">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 3</span></span><br><span class="line">sudo sed -i &#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 4: 更新并安装Docker-CE</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 4: 开启Docker服务</span></span><br><span class="line">sudo service docker start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim /etc/yum.repos.d/docker-ce.repo</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  将[docker-ce-test]下方的enabled=0修改为enabled=1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 安装指定版本的Docker-CE:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum list docker-ce.x86_64 --showduplicates | <span class="built_in">sort</span> -r</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  Loading mirror speeds from cached hostfile</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  Loaded plugins: branch, fastestmirror, langpacks</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  Available Packages</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo yum -y install docker-ce-[VERSION]</span></span><br></pre></td></tr></table></figure><h4 id="1-关闭防火墙-关闭开机自启"><a href="#1-关闭防火墙-关闭开机自启" class="headerlink" title="1.关闭防火墙,关闭开机自启"></a>1.关闭防火墙,关闭开机自启</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">关闭防火墙</span><br><span class="line">systemclt stop firewalld</span><br><span class="line">关闭防火墙开机自启</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><h4 id="2-临时和永久SElinux"><a href="#2-临时和永久SElinux" class="headerlink" title="2.临时和永久SElinux"></a>2.临时和永久SElinux</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">临时关闭selinux</span><br><span class="line">setenforce 0</span><br><span class="line">永久关闭selinux</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=enforcing 改为 SELINUX=disabled</span><br></pre></td></tr></table></figure><h3 id="二、安装数据库MariaDB-启动数据库，并设置为开机启动"><a href="#二、安装数据库MariaDB-启动数据库，并设置为开机启动" class="headerlink" title="二、安装数据库MariaDB,启动数据库，并设置为开机启动"></a>二、安装数据库MariaDB,启动数据库，并设置为开机启动</h3><h4 id="1-安装数据库"><a href="#1-安装数据库" class="headerlink" title="1.安装数据库"></a>1.安装数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装mariadb数据库</span><br><span class="line">yum install -y mariadb mariadb-server</span><br><span class="line">启动mariadb</span><br><span class="line">systemctl start mariadb</span><br><span class="line">开启mariadb开机自启</span><br><span class="line">systemctl enable mariadb</span><br></pre></td></tr></table></figure><h4 id="2-设置数据库密码，开启访问权限"><a href="#2-设置数据库密码，开启访问权限" class="headerlink" title="2.设置数据库密码，开启访问权限"></a>2.设置数据库密码，开启访问权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mysql -uroot</span><br><span class="line">设置root用户密码</span><br><span class="line">SET password=PASSWORD(&#x27;123456&#x27;);</span><br><span class="line">开启所有IP可以访问</span><br><span class="line"><span class="meta prompt_">MariaDB[(none)]&gt;</span><span class="language-bash">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span> WITH GRANT OPTION;</span></span><br></pre></td></tr></table></figure><h4 id="3-创建数据库chemex"><a href="#3-创建数据库chemex" class="headerlink" title="3.创建数据库chemex"></a>3.创建数据库chemex</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建chemex数据库</span><br><span class="line"><span class="meta prompt_">MariaDB[(none)]&gt;</span><span class="language-bash">create database chemex;</span></span><br></pre></td></tr></table></figure><h3 id="三、安装Docker，下载chemex镜像"><a href="#三、安装Docker，下载chemex镜像" class="headerlink" title="三、安装Docker，下载chemex镜像"></a>三、安装<a href="https://so.csdn.net/so/search?q=Docker&spm=1001.2101.3001.7020">Docker</a>，下载chemex镜像</h3><h4 id="1-安装docker，下载镜像，启动docker容器"><a href="#1-安装docker，下载镜像，启动docker容器" class="headerlink" title="1.安装docker，下载镜像，启动docker容器"></a>1.安装docker，下载镜像，启动docker容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">安装docker</span><br><span class="line">yum install -y docker</span><br><span class="line">启动docker</span><br><span class="line">systemctl start docker</span><br><span class="line">开启docker开机自启</span><br><span class="line">systemctl enable docker</span><br><span class="line">下载chemex镜像</span><br><span class="line">docker pull xiangwb/chemex</span><br><span class="line">启动chemex镜像</span><br><span class="line">docker run -itd -e DB_HOST=172.20.46.176 \</span><br><span class="line">-e DB_PORT=3306 \</span><br><span class="line">-e DB_DATABASE=chemex \</span><br><span class="line">-e DB_USERNAME=root \</span><br><span class="line">-e DB_PASSWORD=123456 \</span><br><span class="line">--name chemex \</span><br><span class="line">-p8888:8000 xiangwb/chemex:latest</span><br></pre></td></tr></table></figure><h5 id="迁移数据库"><a href="#迁移数据库" class="headerlink" title="迁移数据库"></a>迁移数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 进入容器内部</span><br><span class="line">docker exec -it chemex /bin/bash</span><br><span class="line"># 执行迁移数据库</span><br><span class="line">php artisan migrate</span><br><span class="line"># 安装</span><br><span class="line">php artisan chemex:install</span><br><span class="line">ctrl+q+p推出</span><br></pre></td></tr></table></figure><h4 id="2-查看docker状态"><a href="#2-查看docker状态" class="headerlink" title="2.查看docker状态"></a>2.查看docker状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class="line">bbb600bfebc5        celaraze/chemex     &quot;/docker-entrypoin...&quot;   2 hours ago         Up 2 hours          0.0.0.0:80-&gt;80/tcp   hopeful_clarke</span><br></pre></td></tr></table></figure><h3 id="四、访问测试"><a href="#四、访问测试" class="headerlink" title="四、访问测试"></a>四、访问测试</h3><h4 id="登录网址http-localhost-8888"><a href="#登录网址http-localhost-8888" class="headerlink" title="登录网址http://localhost:8888"></a>登录网址<a href="http://localhost:8888/">http://localhost:8888</a></h4><h4 id="初始账号密码-admin-x2F-admin"><a href="#初始账号密码-admin-x2F-admin" class="headerlink" title="初始账号密码:admin&#x2F;admin"></a>初始账号密码:admin&#x2F;admin</h4>]]></content>
      
      
      <categories>
          
          <category> 杂谈教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2023/01/25/%E6%B5%8B%E8%AF%952/"/>
      <url>/2023/01/25/%E6%B5%8B%E8%AF%952/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ktoucha/blogimage@main/img/58840634_p0.jpg" alt="58840634_p0"></p><p><img src="https://cdn.jsdelivr.net/gh/ktoucha/blogimage@main/img/69888657_p0.png" alt="69888657_p0"><img src="C:\Users\12480\OneDrive\桌面\img\86519098_p0.png" alt="86519098_p0"><img src="C:\Users\12480\OneDrive\桌面\img\64344045_p0.jpg" alt="64344045_p0"><img src="https://cdn.jsdelivr.net/gh/ktoucha/blogimage@main/img/58769465_p0.png" alt="58769465_p0"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
